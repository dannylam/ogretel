/**
 */
package model.provider;

import java.util.ArrayList;
import java.util.Collection;

import model.util.ModelAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ModelItemProviderAdapterFactory extends ModelAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ModelItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.RoomType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RoomTypeItemProvider roomTypeItemProvider;

	/**
	 * This creates an adapter for a {@link model.RoomType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRoomTypeAdapter() {
		if (roomTypeItemProvider == null) {
			roomTypeItemProvider = new RoomTypeItemProvider(this);
		}

		return roomTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.Experience} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExperienceItemProvider experienceItemProvider;

	/**
	 * This creates an adapter for a {@link model.Experience}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExperienceAdapter() {
		if (experienceItemProvider == null) {
			experienceItemProvider = new ExperienceItemProvider(this);
		}

		return experienceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.AbstractExtra} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AbstractExtraItemProvider abstractExtraItemProvider;

	/**
	 * This creates an adapter for a {@link model.AbstractExtra}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAbstractExtraAdapter() {
		if (abstractExtraItemProvider == null) {
			abstractExtraItemProvider = new AbstractExtraItemProvider(this);
		}

		return abstractExtraItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.Product} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProductItemProvider productItemProvider;

	/**
	 * This creates an adapter for a {@link model.Product}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProductAdapter() {
		if (productItemProvider == null) {
			productItemProvider = new ProductItemProvider(this);
		}

		return productItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.Room} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RoomItemProvider roomItemProvider;

	/**
	 * This creates an adapter for a {@link model.Room}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRoomAdapter() {
		if (roomItemProvider == null) {
			roomItemProvider = new RoomItemProvider(this);
		}

		return roomItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.ExtraHandler} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExtraHandlerItemProvider extraHandlerItemProvider;

	/**
	 * This creates an adapter for a {@link model.ExtraHandler}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExtraHandlerAdapter() {
		if (extraHandlerItemProvider == null) {
			extraHandlerItemProvider = new ExtraHandlerItemProvider(this);
		}

		return extraHandlerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link java.util.Map.Entry} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntegerToExtraMapItemProvider integerToExtraMapItemProvider;

	/**
	 * This creates an adapter for a {@link java.util.Map.Entry}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntegerToExtraMapAdapter() {
		if (integerToExtraMapItemProvider == null) {
			integerToExtraMapItemProvider = new IntegerToExtraMapItemProvider(this);
		}

		return integerToExtraMapItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.RoomHandler} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RoomHandlerItemProvider roomHandlerItemProvider;

	/**
	 * This creates an adapter for a {@link model.RoomHandler}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRoomHandlerAdapter() {
		if (roomHandlerItemProvider == null) {
			roomHandlerItemProvider = new RoomHandlerItemProvider(this);
		}

		return roomHandlerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link java.util.Map.Entry} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntegerToRoomMapItemProvider integerToRoomMapItemProvider;

	/**
	 * This creates an adapter for a {@link java.util.Map.Entry}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntegerToRoomMapAdapter() {
		if (integerToRoomMapItemProvider == null) {
			integerToRoomMapItemProvider = new IntegerToRoomMapItemProvider(this);
		}

		return integerToRoomMapItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.Calendar} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CalendarItemProvider calendarItemProvider;

	/**
	 * This creates an adapter for a {@link model.Calendar}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCalendarAdapter() {
		if (calendarItemProvider == null) {
			calendarItemProvider = new CalendarItemProvider(this);
		}

		return calendarItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.RoomTypes} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RoomTypesItemProvider roomTypesItemProvider;

	/**
	 * This creates an adapter for a {@link model.RoomTypes}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRoomTypesAdapter() {
		if (roomTypesItemProvider == null) {
			roomTypesItemProvider = new RoomTypesItemProvider(this);
		}

		return roomTypesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.StringToRoomType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StringToRoomTypeItemProvider stringToRoomTypeItemProvider;

	/**
	 * This creates an adapter for a {@link model.StringToRoomType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStringToRoomTypeAdapter() {
		if (stringToRoomTypeItemProvider == null) {
			stringToRoomTypeItemProvider = new StringToRoomTypeItemProvider(this);
		}

		return stringToRoomTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.ExtrasMaintenance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExtrasMaintenanceItemProvider extrasMaintenanceItemProvider;

	/**
	 * This creates an adapter for a {@link model.ExtrasMaintenance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExtrasMaintenanceAdapter() {
		if (extrasMaintenanceItemProvider == null) {
			extrasMaintenanceItemProvider = new ExtrasMaintenanceItemProvider(this);
		}

		return extrasMaintenanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.RoomMaintenance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RoomMaintenanceItemProvider roomMaintenanceItemProvider;

	/**
	 * This creates an adapter for a {@link model.RoomMaintenance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRoomMaintenanceAdapter() {
		if (roomMaintenanceItemProvider == null) {
			roomMaintenanceItemProvider = new RoomMaintenanceItemProvider(this);
		}

		return roomMaintenanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.MaintenanceProvidesForBooking} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MaintenanceProvidesForBookingItemProvider maintenanceProvidesForBookingItemProvider;

	/**
	 * This creates an adapter for a {@link model.MaintenanceProvidesForBooking}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMaintenanceProvidesForBookingAdapter() {
		if (maintenanceProvidesForBookingItemProvider == null) {
			maintenanceProvidesForBookingItemProvider = new MaintenanceProvidesForBookingItemProvider(this);
		}

		return maintenanceProvidesForBookingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link java.util.Map.Entry} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StringToListsMapItemProvider stringToListsMapItemProvider;

	/**
	 * This creates an adapter for a {@link java.util.Map.Entry}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStringToListsMapAdapter() {
		if (stringToListsMapItemProvider == null) {
			stringToListsMapItemProvider = new StringToListsMapItemProvider(this);
		}

		return stringToListsMapItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (roomTypeItemProvider != null) roomTypeItemProvider.dispose();
		if (experienceItemProvider != null) experienceItemProvider.dispose();
		if (abstractExtraItemProvider != null) abstractExtraItemProvider.dispose();
		if (productItemProvider != null) productItemProvider.dispose();
		if (roomItemProvider != null) roomItemProvider.dispose();
		if (extraHandlerItemProvider != null) extraHandlerItemProvider.dispose();
		if (integerToExtraMapItemProvider != null) integerToExtraMapItemProvider.dispose();
		if (roomHandlerItemProvider != null) roomHandlerItemProvider.dispose();
		if (integerToRoomMapItemProvider != null) integerToRoomMapItemProvider.dispose();
		if (calendarItemProvider != null) calendarItemProvider.dispose();
		if (roomTypesItemProvider != null) roomTypesItemProvider.dispose();
		if (stringToRoomTypeItemProvider != null) stringToRoomTypeItemProvider.dispose();
		if (extrasMaintenanceItemProvider != null) extrasMaintenanceItemProvider.dispose();
		if (roomMaintenanceItemProvider != null) roomMaintenanceItemProvider.dispose();
		if (maintenanceProvidesForBookingItemProvider != null) maintenanceProvidesForBookingItemProvider.dispose();
		if (stringToListsMapItemProvider != null) stringToListsMapItemProvider.dispose();
	}

}
